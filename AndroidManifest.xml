<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
	package="com.google.code.appsorganizer" android:versionCode="37"
	android:versionName="0.5.1">
	<application android:icon="@drawable/icon" android:label="@string/app_name"
		android:name="AppsOrganizerApplication">
		<uses-library android:name="android.test.runner" />
		<activity android:name=".SplashScreenActivity" android:label="@string/app_name" android:launchMode="singleTask">
			<intent-filter>
				<action android:name="android.intent.action.MAIN" />
				<category android:name="android.intent.category.LAUNCHER" />
			</intent-filter>
		</activity>

		<provider android:authorities="com.google.code.appsorganizer"
			android:multiprocess="true" android:name=".livefolder.AppLabelProvider" />
		<activity android:name=".LabelListActivity" android:launchMode="singleTask"></activity>
		<activity android:name=".FileImporter"></activity>
		<activity android:name=".chooseicon.ChooseIconActivity"></activity>
        <!-- This section of sample code shows how your application can add shortcuts to -->
        <!-- the launcher (home screen).  Shortcuts have a three step life cycle. -->
        
        <!-- 1.  Your application offers to provide shortcuts to the launcher.  When -->
        <!--     the user installs a shortcut, an activity within your application -->
        <!--     generates the actual shortcut and returns it to the launcher, where it -->
        <!--     is shown to the user as an icon. -->
        
        <!-- 2.  Any time the user clicks on an installed shortcut, an intent is sent. -->
        <!--     Typically this would then be handled as necessary by an activity within -->
        <!--     your application. -->

        <!-- 3.  The shortcut is deleted.  There is no notification to your application. -->

        <!-- In order provide shortcuts from your application, you provide three things: -->

        <!-- 1.  An intent-filter declaring your ability to provide shortcuts -->
        <!-- 2.  Code within the activity to provide the shortcuts as requested -->
        <!-- 3.  Code elsewhere within your activity, if appropriate, to receive -->
        <!--     intents from the shortcut itself. -->

        <activity android:name=".shortcut.LabelShortcut"
                  android:label="@string/Apps_organizer_label" 
                  android:theme="@android:style/Theme.Dialog" android:taskAffinity="com.google.code.appsorganizer.shortcuts">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.SAMPLE_CODE" />
            </intent-filter>

        </activity>

        <!-- It is recommended that you use an activity-alias to provide the "CREATE_SHORTCUT" -->
        <!-- intent-filter.  This gives you a way to set the text (and optionally the -->
        <!-- icon) that will be seen in the launcher's create-shortcut user interface. -->

        <activity 
            android:name=".shortcut.ShortcutCreator"
            android:label="@string/app_name">

            <!--  This intent-filter allows your shortcuts to be created in the launcher. -->
            <intent-filter>
                <action android:name="android.intent.action.CREATE_SHORTCUT" />
                <category android:name="android.intent.category.DEFAULT" />
            </intent-filter>

        </activity>
        
        	</application>
	<uses-sdk android:minSdkVersion="3" />
	<instrumentation android:name="android.test.InstrumentationTestRunner"
		android:targetPackage="com.google.code.appsorganizer"></instrumentation>


</manifest> 